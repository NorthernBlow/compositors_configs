#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Hyprland –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import os
import sys
import subprocess
import time
import json
from pathlib import Path
from typing import Optional

class HyprlandDeployer:
    def __init__(self):
        self.repo_root = Path(__file__).parent.parent.parent
        self.terraform_dir = self.repo_root / "automation" / "terraform"
        self.ansible_dir = self.repo_root / "automation" / "ansible"
        
    def run_command(self, cmd: list, cwd: Optional[Path] = None) -> tuple[int, str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –≤—ã–≤–æ–¥"""
        try:
            result = subprocess.run(
                cmd, 
                cwd=cwd or Path.cwd(),
                capture_output=True,
                text=True,
                check=False
            )
            return result.returncode, result.stdout + result.stderr
        except Exception as e:
            return 1, str(e)
            
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        deps = ["terraform", "ansible", "libvirtd"]
        missing = []
        
        for dep in deps:
            code, _ = self.run_command(["which", dep])
            if code != 0:
                missing.append(dep)
                
        if missing:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
            return False
            
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
        
    def terraform_init(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform...")
        code, output = self.run_command(["terraform", "init"], self.terraform_dir)
        if code != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Terraform: {output}")
            return False
        return True
        
    def terraform_apply(self) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ VM —á–µ—Ä–µ–∑ Terraform"""
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã...")
        
        # Plan
        code, output = self.run_command(["terraform", "plan", "-out=tfplan"], self.terraform_dir)
        if code != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Terraform: {output}")
            return None
            
        # Apply
        code, output = self.run_command(["terraform", "apply", "tfplan"], self.terraform_dir)
        if code != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Terraform: {output}")
            return None
            
        # –ü–æ–ª—É—á–∏—Ç—å IP VM
        code, output = self.run_command(["terraform", "output", "-json"], self.terraform_dir)
        if code == 0:
            try:
                outputs = json.loads(output)
                vm_ip = outputs.get("vm_ip", {}).get("value")
                print(f"‚úÖ VM —Å–æ–∑–¥–∞–Ω–∞ —Å IP: {vm_ip}")
                return vm_ip
            except json.JSONDecodeError:
                pass
                
        return "192.168.100.100"  # fallback IP
        
    def wait_for_vm(self, vm_ip: str, timeout: int = 300) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ VM"""
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ VM {vm_ip}...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            code, _ = self.run_command([
                "ssh", 
                "-o", "ConnectTimeout=5",
                "-o", "StrictHostKeyChecking=no",
                f"arch@{vm_ip}", 
                "echo ready"
            ])
            
            if code == 0:
                print("‚úÖ VM –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
                return True
                
            time.sleep(10)
            
        print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è VM")
        return False
        
    def ansible_deploy(self, vm_ip: str) -> bool:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ansible"""
        print("üéØ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –û–±–Ω–æ–≤–∏—Ç—å inventory —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º IP
        inventory_file = self.ansible_dir / "inventory.yml"
        with open(inventory_file, 'r') as f:
            inventory = f.read()
            
        inventory = inventory.replace("{{ vm_ip | default('192.168.100.100') }}", vm_ip)
        with open(inventory_file, 'w') as f:
            f.write(inventory)
            
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å playbook
        code, output = self.run_command([
            "ansible-playbook", 
            "-i", "inventory.yml",
            "playbook.yml",
            "-v"
        ], self.ansible_dir)
        
        if code != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ Ansible: {output}")
            return False
            
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    def test_deployment(self, vm_ip: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        tests = [
            ("Waybar config", "ls ~/.config/waybar/style.css"),
            ("Neovim config", "ls ~/.config/nvim/init.lua"),
            ("Weather script", "python ~/.config/waybar/weather.py"),
            ("Load average script", "python ~/.config/waybar/la.py"),
        ]
        
        failed_tests = []
        for test_name, cmd in tests:
            code, output = self.run_command([
                "ssh",
                "-o", "StrictHostKeyChecking=no", 
                f"arch@{vm_ip}",
                cmd
            ])
            
            if code == 0:
                print(f"  ‚úÖ {test_name}")
            else:
                print(f"  ‚ùå {test_name}: {output}")
                failed_tests.append(test_name)
                
        if failed_tests:
            print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã: {', '.join(failed_tests)}")
            return False
            
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    def deploy(self) -> bool:
        """–ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        if not self.check_dependencies():
            return False
            
        if not self.terraform_init():
            return False
            
        vm_ip = self.terraform_apply()
        if not vm_ip:
            return False
            
        if not self.wait_for_vm(vm_ip):
            return False
            
        if not self.ansible_deploy(vm_ip):
            return False
            
        if not self.test_deployment(vm_ip):
            return False
            
        print(f"üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üñ•Ô∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ssh arch@{vm_ip}")
        return True
        
    def destroy(self) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ VM"""
        print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã...")
        code, output = self.run_command(["terraform", "destroy", "-auto-approve"], self.terraform_dir)
        if code != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {output}")
            return False
        print("‚úÖ VM —É–¥–∞–ª–µ–Ω–∞")
        return True

def main():
    deployer = HyprlandDeployer()
    
    if len(sys.argv) > 1:
        action = sys.argv[1]
        if action == "destroy":
            deployer.destroy()
        elif action == "test":
            vm_ip = sys.argv[2] if len(sys.argv) > 2 else "192.168.100.100"
            deployer.test_deployment(vm_ip)
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: deploy, destroy, test")
    else:
        deployer.deploy()

if __name__ == "__main__":
    main()